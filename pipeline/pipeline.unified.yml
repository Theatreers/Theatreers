stages:
- stage: 'build'
  displayName: 'Build'
  variables:
    buildPublishPath: '$(Build.ArtifactStagingDirectory)/publish-path/'
    dotnetBuildOutputPath: '$(Build.ArtifactStagingDirectory)/build-output/'
    projectName: 'Theatreers.Show'
  jobs:
    - job: 'build'
      displayName: 'Nightly Build'
      pool:
        name: Hosted Ubuntu 1604
      steps:
      # Setup the Sonar Cloud for analysis
        - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
          displayName: 'Prepare analysis on SonarCloud'
          inputs:
            SonarCloud: 'Theatreers Sonarcloud'
            organization: 'theatreers'
            projectKey: $(projectName)
            projectName: $(projectName)
        - task: DotNetCoreCLI@2
          displayName: 'Build project'
          inputs:
            projects: 'src/*.csproj'
            arguments: '--output $(dotnetBuildOutputPath) --configuration Release'
        # Execute the Sonar Cloud Analysis, and push to Sonar Cloud
        - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
          displayName: 'Run Code Analysis'
        # Zip the files to be published
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(dotnetBuildOutputPath)'
            includeRootFolder: false
            archiveFile: '$(buildPublishPath)/src/$(Build.BuildId).zip'
        # Copy the template to the deploy folder
        - task: CopyFiles@2
          displayName: 'Copy Files to: $(buildPublishPath)/templates'
          inputs:
            SourceFolder: deploy
            TargetFolder: '$(buildPublishPath)/deploy'
        # Publish the artifacts
        - task: PublishPipelineArtifact@0
          displayName: 'Publish Pipeline Artifact'
          inputs:
            targetPath: '$(buildPublishPath)'
- stage: 'dev'
  displayName: 'Dev Deployment'
  dependsOn: 'build'
  variables: 
    artifactsAccountName: 'thmgtdevartifactstg'
    artifactsResourceGroupName: 'th-mgt-dev-rg'
    cosmosDbAccountName: 'th-core-dev-cosmos'
    cosmosDbResourceGroup: 'th-core-dev-rg'
    environmentName: 'dev'
    keyvaultName: 'th-show-dev-kv'
    region: 'West Europe'
    serviceBusNamespaceResourceGroup: 'th-core-dev-rg'
    serviceName: 'show'
    servicePrincipalObjectId: '6ee1bb40-e589-4884-90bc-c705d88bb3e0'
    serviceResourceGroupName: 'th-show-dev-rg'
    tenantId: '8d56b40f-772a-4828-bf64-91905baabc85'
  jobs:
    - job: 'devrelease'
      displayName: 'Nightly Build'
      pool:
        name: 'Hosted Windows 2019 with VS2019'
      steps:
      # Setup the Sonar Cloud for analysis
        - task: DownloadPipelineArtifact@1
          inputs:
            buildType: 'current'
            artifactName: 'drop'
            targetPath: '$(System.DefaultWorkingDirectory)/'
        - task: CmdLine@2
          inputs:
            script: 'touch dummy.txt'
        - task: AzureFileCopy@3
          inputs:
            SourcePath: '$(System.DefaultWorkingDirectory)/dummy.txt'
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            Destination: 'AzureBlob'
            storage: '$(artifactsAccountName)'
            ContainerName: 'templates'
            outputStorageUri: 'templateContainerUri'
            outputStorageContainerSasToken: 'templateContainerSasToken'
        #- task: CmdLine@2
        #  inputs:
        #    script: 'ls -la
        #       cd "$(System.DefaultWorkingDirectory)/deploy"
        #       ls -la'
        - task: AzureResourceGroupDeployment@2
          inputs:
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(serviceResourceGroupName)'
            location: '$(region)'
            templateLocation: 'Linked artifact'
            csmFile: '$(System.DefaultWorkingDirectory)/deploy/show.json'
            overrideParameters: '-templateContainerUri $(templateContainerUri) -templateContainerSasToken $(templateContainerSasToken) -environmentName $(environmentName) -tenantId $(tenantId) -servicePrincipalObjectId $(servicePrincipalObjectId) -serviceBusNamespaceResourceGroup $(serviceBusNamespaceResourceGroup) -cosmosDbAccountName $(cosmosDbAccountName) -cosmosDbResourceGroup $(cosmosDbResourceGroup)'
            deploymentMode: 'Incremental'
        - task: AzureKeyVault@1
          inputs:
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            KeyVaultName: '$(keyvaultName)'