{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {            
        "cosmosDbAccountName": {
            "type": "string",
            "metadata": {
                "description": "Name of the CosmosDB account where the backend data is stored"
            }
        },
        "cosmosDbResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Resource group for the CosmosDB account, where the backend data is stored. If this is incorrect, deployment will fail as ARM cannot find the specific resource."
            }
        },          
        "environmentName": {
            "type": "string",
            "allowedValues": [
                "dev",
                "test",
                "qa",
                "prod"
            ],
            "defaultValue": "dev",
            "metadata": {
                "description": "Define which environment is being deployed, this will affect naming convention of all resources"
            }
        },            
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },   
        "servicePrincipalObjectId": {
            "type": "string",
            "metadata": {
                "description": "Object ID (not application ID) of the Azure DevOps service principal to be granted access to the KeyVault."
            }
        },        
        "tenantId": {
            "type": "string",
            "metadata": {
                "description": "GUID of the Azure AD Tenant associated with the Azure KeyVault"
            }
        },      
        "templateContainerUri": {
            "type": "string",
            "metadata": {
                "description": "URI of the Blob Storage Container containing the ARM Template building blocks"
            }
        },
        "templateContainerSasToken": {
            "type": "string",
            "metadata": {
                "description": "The SAS token of the container containing the ARM Template building blocks"
            }
        }
    },
    "variables": {
        "abbreviations": {
            "northeurope": "neu",
            "westeurope": "weu"
        },
        "apimServiceName": "[concat(variables('coreNamePrefix'),'apim')]",
        "serviceAppinsightsName": "[concat(variables('serviceNamePrefix'), 'ai')]",
        "coreAppInsightsName": "[concat(variables('coreNamePrefix'), 'ai')]",
        "coreNamePrefix": "[concat(variables('organisationPrefix'),'-core-', variables('abbreviations')[parameters('location')], '-', parameters('environmentName'),'-')]",
        "functionName": "[concat(variables('serviceNamePrefix'), 'func')]",
        "functionPlanName": "[concat(variables('serviceNamePrefix'), 'plan')]",
        "keyvaultName": "[concat(variables('serviceNamePrefix'), 'kv')]",
        "serviceNamePrefix": "[concat(variables('organisationPrefix'),'-', variables('serviceName'), '-', variables('abbreviations')[parameters('location')], '-', parameters('environmentName'),'-')]",
        "serviceResourceGroupName": "[concat(variables('serviceNamePrefix'), 'rg')]",
        "namePrefixWithoutDashes": "[replace(variables('serviceNamePrefix'), '-', '')]",
        "organisationPrefix": "th",
        "serviceName": "show"
    },
    "resources": [
        {
            "apiVersion": "2017-05-10",
            "name": "functionDeployment",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "appInsightsDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'function.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[variables('serviceNamePrefix')]"
                    },
                    "namePrefixWithoutDashes": {
                        "value": "[variables('namePrefixWithoutDashes')]"
                    },
                    "appInsightsName": {
                        "value": "[variables('coreAppinsightsName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an Azure Function (Function App, App Serivce Plan) and Storage Account, by using the Theatreers Azure Function Building Block."
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat(variables('functionName'), 'Deployment')]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(variables('coreNamePrefix'), 'rg')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'apim-apis.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apimServiceName": {
                        "value": "[variables('apimServiceName')]"
                    },
                    "functionName": {
                        "value": "[variables('functionName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an APIs for the given Microservice."
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat(variables('functionName'), 'Deployment')]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[concat(variables('coreNamePrefix'), 'rg')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'apim-backend.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apimServiceName": {
                        "value": "[variables('apimServiceName')]"
                    },
                    "functionPlanName": {
                        "value": "[variables('functionPlanName')]"
                    },
                    "functionName": {
                        "value": "[variables('functionName')]"
                    },
                    "functionResourceGroup": {
                        "value": "[variables('serviceResourceGroupName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an APIs for the given Microservice."
        },
        {
            "apiVersion": "2017-05-10",
            "name": "appInsightsDeployment",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'applicationInsights.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "serviceAppinsightsName": {
                        "value": "[variables('serviceAppinsightsName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an Azure Function (Function App, App Serivce Plan) and Storage Account, by using the Theatreers Azure Function Building Block."
        },       
        {
            "apiVersion": "2017-05-10",
            "name": "keyVaultDeployment",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'keyVault.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vaultName": {
                        "value": "[variables('keyvaultName')]"
                    },
                    "tenantId": {
                        "value": "[parameters('tenantId')]"
                    },
                    "objectId": {
                        "value": "[parameters('servicePrincipalObjectId')]"
                    }
                }
            },
            "comments": "Downstream template to deploy Azure KeyVault, associate it with a gievn tenant and assign a Service Principal Object with access to secrets. This uses the Theatreers Azure KeyVault Building Block."
        }, 
        {
            "apiVersion": "2018-02-14",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'cosmosConnectionString')]",
            "properties": {
                "value": "[concat('AccountEndpoint=https://', parameters('cosmosDbAccountName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId(parameters('cosmosDbResourceGroup'), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), '2015-11-06').primaryMasterKey)]"
            },
            "dependsOn": [
                "keyVaultDeployment"
            ],
            "comments": "Resource to deploy the Azure CosmosDB Connection String as a  KeyVault Secret."
        }
    ],
    "outputs": {}
}