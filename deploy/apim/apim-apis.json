{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apimServiceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the API Management Service Instance"
      }
    },
    "functionName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Function App Deployed"
      }
    },
    "serviceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the microService"
      }
    }
  },
  "resources": [
    {
      "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'))]",
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2019-01-01",
      "properties": {
        "displayName": "[parameters('serviceName')]",
        "path": "[parameters('serviceName')]",
        "protocols": [
          "https"
        ],
        "subscriptionRequired": false,
        "serviceUrl": "[concat('https://', parameters('functionName'), '.azurewebsites.net/api')]"
      }
    },    
    {
      "type": "Microsoft.ApiManagement/service/apis/policies",
      "apiVersion": "2019-01-01",
      "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'), '/policy')]",
      "dependsOn": [
          "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), parameters('serviceName'))]"
      ],
      "properties": {
          "value": "[concat('<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service base-url=\"https://', parameters('functionName'), '.azurewebsites.net/api/\" />\r\n<cors>\r\n      <allowed-origins>\r\n        <origin>http://localhost:8080</origin>\r\n        <origin>https://www.theatreers.com</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"300\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PATCH</method>\r\n        <method>DELETE</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n    </cors>\r\n    <cache-lookup vary-by-developer=\"false\" vary-by-developer-groups=\"false\">\r\n      <vary-by-header>Accept</vary-by-header>\r\n      <vary-by-header>Accept-Charset</vary-by-header>\r\n      <vary-by-header>Authorization</vary-by-header>\r\n    </cache-lookup>\r\n   </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n <set-header name=\"Access-Control-Allow-Origin\" exists-action=\"append\">\r\n      <value>*</value>\r\n    </set-header>\r\n    <set-header name=\"Access-Control-Allow-Credentials\" exists-action=\"append\">\r\n      <value>*</value>\r\n    </set-header>\r\n    <cache-store caching-mode=\"cache-on\" duration=\"20\" />\r\n   </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>')]",
          "format": "xml"
      }
    },
    {
      "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'), '/healthcheck')]",
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), parameters('serviceName'))]"
      ],
      "properties": {
        "description": "HealthCheck Pattern",
        "displayName": "HealthCheck",
        "method": "GET",
        "urlTemplate": "/health"
      }
    },
    {
      "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'), '/getuserpermissions')]",
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), parameters('serviceName'))]"
      ],
      "properties": {
        "description": "API used to Get Users via Backend Microservice and Microsoft Graph.",
        "displayName": "GetUserPermissions",
        "method": "GET",
        "urlTemplate": "/moderation/permission"
      }
    },
    {
        "type": "Microsoft.ApiManagement/service/apis/operations/policies",
        "apiVersion": "2019-01-01",
        "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'), '/getuserpermissions/policy')]",
        "dependsOn": [
          "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apimServiceName'), parameters('serviceName'), 'createshoworchestrator')]"
        ],
        "properties": {
            "value": "<policies>\r\n  <inbound>\r\n    <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing or invalid.\">\r\n      <openid-config url=\"https://theatreers.b2clogin.com/theatreers.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=B2C_1_SiUpIn\" />\r\n      <audiences>\r\n        <audience>d86031af-7704-4706-b2d2-2c771177f729</audience>\r\n      </audiences>\r\n    </validate-jwt>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
            "format": "xml"
        }
    },
    {
      "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'), '/setpermissions')]",
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2019-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimServiceName'), parameters('serviceName'))]"
      ],
      "properties": {
        "templateParameters": [
          {
            "name": "userId",
            "type": "Guid",
            "required": true
          }
        ],
        "description": "API used to set permission (via Azure Function and Microsoft Graph)",
        "displayName": "SetPermissions",
        "method": "PUT",
        "urlTemplate": "/moderation/permission/{id}"
      }
    },
    {
        "type": "Microsoft.ApiManagement/service/apis/operations/policies",
        "apiVersion": "2019-01-01",
        "name": "[concat(parameters('apimServiceName'), '/', parameters('serviceName'), '/setpermissions/policy')]",
        "dependsOn": [
          "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apimServiceName'), parameters('serviceName'), 'createchowimageobjectbyhttp')]"
        ],
        "properties": {
            "value": "<policies>\r\n  <inbound>\r\n    <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing or invalid.\">\r\n      <openid-config url=\"https://theatreers.b2clogin.com/theatreers.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=B2C_1_SiUpIn\" />\r\n      <audiences>\r\n        <audience>d86031af-7704-4706-b2d2-2c771177f729</audience>\r\n      </audiences>\r\n    </validate-jwt>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
            "format": "xml"
        }
    }
  ]
}