# Set the variables to be used across the entire pipeline
variables:
  serviceName: 'show'
  tenantId: '8d56b40f-772a-4828-bf64-91905baabc85'
  projectName: 'Theatreers.Show'
  buildPublishPath: '$(Build.ArtifactStagingDirectory)/publish-path/'
  dotnetBuildOutputPath: '$(Build.ArtifactStagingDirectory)/build-output/'
# Define the stages
# The first stage defined is the Feature CI Build
# The second stage defined is the PR Build when merging from Feature branches to master
# The final stage is the Master CI Build / Release path
stages:
- stage: 'Feature_CI_Build'
  # Notice how in some stages, there is dependsOn: [], this is because the default behaviour of
  # yaml pipelines is to set dependencies from one stage to the next, if dependsOn is not defined.
  dependsOn: []
  # Set a condition, that looks for a CI Trigger, an agent successfully found
  # and that the branch is in the feature folder.
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), contains(variables['Build.SourceBranch'], 'refs/heads/feature/'))
  displayName: 'Feature CI Build'
  # The first job is run on an Ubuntu hosted image.
  # As this is a feature branch, it just restores and 
  # builds the project. On the backlog is designing some
  # unit tests.
  jobs:
    - job: 'build'
      displayName: 'Feature CI Build Job'
      pool:
        name: Hosted Ubuntu 1604
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Restore project'
          inputs:
            command: 'restore'
            projects: 'src/Theatreers.Show/Theatreers.Show.csproj'
            feedsToUse: 'select'
            vstsFeed: 'fa1af919-202e-4e5c-91a7-dafe6f7d519e'
        - task: DotNetCoreCLI@2
          displayName: 'Build project'
          inputs:
            projects: 'src/Theatreers.Show/Theatreers.Show.csproj'
            arguments: '--output $(dotnetBuildOutputPath) --configuration Release'
- stage: 'PR_Build'
  # Notice how in some stages, there is dependsOn: [], this is because the default behaviour of
  # yaml pipelines is to set dependencies from one stage to the next, if dependsOn is not defined.
  dependsOn: []  
  # Set a condition, that looks for a Pull request as a build Trigger, 
  # and that an was agent successfully found
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  displayName: 'PR Build from Feature into Master'
  jobs:
    # This job sets up Sonar Cloud for analysis, restores the CSProj
    # including any dependencies from Azure Artifacts. It then builds
    # the project and reports the output to Sonar Cloud.
    - job: 'build'
      displayName: 'PR Build from Feature into Master Job'
      pool:
        name: Hosted Ubuntu 1604
      steps:
      # Setup the Sonar Cloud for analysis
        - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
          displayName: 'Prepare analysis on SonarCloud'
          inputs:
            SonarCloud: 'Theatreers Sonarcloud'
            organization: 'theatreers'
            projectKey: $(projectName)
            projectName: $(projectName) 
        # Restore from Theatreers.Artifacts
        - task: DotNetCoreCLI@2
          displayName: 'Restore project'
          inputs:
            command: 'restore'
            projects: 'src/Theatreers.Show/Theatreers.Show.csproj'
            feedsToUse: 'select'
            vstsFeed: 'fa1af919-202e-4e5c-91a7-dafe6f7d519e'
        # Build the project
        - task: DotNetCoreCLI@2
          displayName: 'Build project'
          inputs:
            projects: 'src/Theatreers.Show/Theatreers.Show.csproj'
            arguments: '--output $(dotnetBuildOutputPath) --configuration Release'
        # Execute the Sonar Cloud Analysis, and push to Sonar Cloud
        - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
          displayName: 'Run Code Analysis'
- stage: 'Master_CI_Build'
  # Set a condition, that looks for a CI Trigger, an agent successfully found
  # and that the branch is the master branch.
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
  # Notice how in some stages, there is dependsOn: [], this is because the default behaviour of
  # yaml pipelines is to set dependencies from one stage to the next, if dependsOn is not defined.
  dependsOn: []
  displayName: 'Master CI Build'
  jobs:
    - job: 'build'
      displayName: 'Build'
      pool:
        name: Hosted Ubuntu 1604
      steps:
      # Setup the Sonar Cloud for analysis
        - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
          displayName: 'Prepare analysis on SonarCloud'
          inputs:
            SonarCloud: 'Theatreers Sonarcloud'
            organization: 'theatreers'
            projectKey: $(projectName)
            projectName: $(projectName)
        # Restore from Theatreers.Artifacts
        - task: DotNetCoreCLI@2
          displayName: 'Restore project'
          inputs:
            command: 'restore'
            projects: 'src/Theatreers.Show/Theatreers.Show.csproj'
            feedsToUse: 'select'
            vstsFeed: 'fa1af919-202e-4e5c-91a7-dafe6f7d519e'        
        - task: WhiteSource Bolt@19
          displayName: 'Execute WhiteSource Scanning'
          inputs:
            cwd: '$(System.DefaultWorkingDirectory)'          
        - task: DotNetCoreCLI@2
          displayName: 'dotnet build'
          inputs:
            command: 'build'
            projects: 'src/Theatreers.Show/Theatreers.Show.csproj'
            arguments: '--output $(dotnetBuildOutputPath) --configuration Release' 
        # Execute the Sonar Cloud Analysis, and push to Sonar Cloud
        - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
          displayName: 'Run Code Analysis'
        - task: CosmosDbEmulator@2
          inputs:
            containerName: 'azure-cosmosdb-emulator'
            enableAPI: 'SQL'
            portMapping: '8081:8081, 8901:8901, 8902:8902, 8979:8979, 10250:10250, 10251:10251, 10252:10252, 10253:10253, 10254:10254, 10255:10255, 10256:10256, 10350:10350'
            hostDirectory: '$(Build.BinariesDirectory)\azure-cosmosdb-emulator'
        - script: dotnet test src/Theatreers.Show.Test/Theatreers.Show.Test.csproj --logger trx
          displayName: 'Execute Tests'
          env: { 'AZURE_COSMOS_DB_CONNECTION_STRING': "$(CosmosDbEmulator.Endpoint)" }
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '**/*.trx'
        # Zip the files to be published
        - task: ArchiveFiles@2
          displayName: 'Zip files for later publishing to Azure Function'
          inputs:
            rootFolderOrFile: '$(dotnetBuildOutputPath)'
            includeRootFolder: false
            archiveFile: '$(buildPublishPath)/src/$(Build.BuildId).zip'
        # Copy the template to the deploy folder
        - task: CopyFiles@2
          displayName: 'Copy ARM Template files for publishing: $(buildPublishPath)/templates'
          inputs:
            SourceFolder: deploy
            TargetFolder: '$(buildPublishPath)/deploy'
        # Publish the artifacts
        - task: PublishPipelineArtifact@0
          displayName: 'Publish Pipeline Artifact'
          inputs:
            targetPath: '$(buildPublishPath)'
# Now we begin defining the release stage
- stage: 'microservice_dev_release'
  displayName: 'Microservice Dev Release'
  # As this is our release train to production, it should depend on our Master CI Build.
  dependsOn: 'Master_CI_Build'
  # Set variables which should exist at a scope throughout this entire stage (i.e. across)
  # multiple jobs
  variables: 
    artifactsAccountName: 'thmgtdevartifactstg'
    artifactsResourceGroupName: 'th-mgt-dev-rg'
    cosmosDbAccountName: 'th-core-dev-cosmos'
    cosmosDbResourceGroup: 'th-core-dev-rg'
    environmentName: 'dev'
    serviceBusNamespaceResourceGroup: 'th-core-dev-rg'
    servicePrincipalObjectId: '6ee1bb40-e589-4884-90bc-c705d88bb3e0'
    serviceResourceGroupName: 'th-show-dev-rg'
  jobs:
    # The release has two phases or jobs, one for a global stamp (those
    # resources all of the regional deployments, and the regional 
    # deployments or stamps). The first is the global resources.
    - job: 'microservice_dev_release_global_job'
      displayName: 'Microservice Release (Global)'
      pool:
        name: 'Hosted Windows 2019 with VS2019'
      steps:
        # Download the artifacts published previously within this pipeline
        - task: DownloadPipelineArtifact@1
          displayName: 'Download Pipeline Artifacts'
          inputs:
            buildType: 'current'
            artifactName: 'drop'
            targetPath: '$(System.DefaultWorkingDirectory)'
        # Copy files to the management storage account
        - task: AzureFileCopy@3
          displayName: 'Copy ARM Templates relating to Show Service to Management Storage Account: $(artifactsAccountName)'
          inputs:
            SourcePath: '$(System.DefaultWorkingDirectory)/deploy/apim'
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            Destination: 'AzureBlob'
            storage: '$(artifactsAccountName)'
            ContainerName: 'templates'
            outputStorageUri: 'templateContainerUri'
            outputStorageContainerSasToken: 'templateContainerSasToken'
        # Deploy the resources that sit at a global level, underpinning
        # the regional stamps for the microservice.
        - task: AzureResourceGroupDeployment@2
          displayName: 'Deploy Global Show Resource Group for $(environmentName) in $(serviceResourceGroupName)'
          inputs:
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(serviceResourceGroupName)'
            location: '$(region)'
            templateLocation: 'Linked artifact'
            csmFile: '$(System.DefaultWorkingDirectory)/deploy/show-global.json'
            overrideParameters: '-templateContainerUri $(templateContainerUri) -templateContainerSasToken $(templateContainerSasToken) -environmentName $(environmentName)'
            deploymentMode: 'Incremental'
    # This next job is the regional deployment.
    - job: 'microservice_dev_release_regional_job'
      displayName: 'Microservice Release (Regional)'
      dependsOn: 'microservice_dev_release_global_job'
      pool:
        name: 'Hosted Windows 2019 with VS2019'
      # Set variables which exist within the scope of this phase, i.e.
      # the regional deployment for our dev environment.
      variables:
        aadClientId: '73e2635f-dadd-443b-9e47-89ac07f91485'
        aadB2cIssuer: 'https://login.microsoftonline.com/theatreers.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=B2C_1_SiUpIn'
      # Use a matrix strategy to repeat this set of tasks across multiple regions
      # It means that it will execute maxParallel number of instances at a time of this
      # phase, and use those key value pairs within each line item of the matrix to
      # outline the build steps.
      strategy:
        matrix: 
          { 
          westeurope: { region: 'West Europe', functionAppName: 'th-show-dev-weu-func', keyvaultName: 'th-show-dev-weu-kv', serviceResourceGroupName: 'th-show-dev-weu-rg' },
          northeurope: { region: 'North Europe', functionAppName: 'th-show-dev-neu-func', keyvaultName: 'th-show-dev-neu-kv', serviceResourceGroupName: 'th-show-dev-neu-rg' }
          }
        maxParallel: 1
      steps:        
        # Setup the Sonar Cloud for analysis
        - task: DownloadPipelineArtifact@1
          displayName: 'Download Pipeline Artifacts'
          inputs:
            buildType: 'current'
            artifactName: 'drop'
            targetPath: '$(System.DefaultWorkingDirectory)/'
        # Copy the files from APIM folder in Git to Storage Account
        - task: AzureFileCopy@3
          displayName: 'Copy ARM Templates relating to Show Service to Management Storage Account: $(artifactsAccountName)'
          inputs:
            SourcePath: '$(System.DefaultWorkingDirectory)/deploy/apim'
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            Destination: 'AzureBlob'
            storage: '$(artifactsAccountName)'
            ContainerName: 'templates'
            outputStorageUri: 'templateContainerUri'
            outputStorageContainerSasToken: 'templateContainerSasToken'
        # Create the appropriate storage account
        - task: AzureResourceGroupDeployment@2
          displayName: 'Deploy $(region) Show Resource Group for $(environmentName) in $(serviceResourceGroupName)'
          inputs:
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            action: 'Create Or Update Resource Group'
            resourceGroupName: '$(serviceResourceGroupName)'
            location: '$(region)'
            templateLocation: 'Linked artifact'
            csmFile: '$(System.DefaultWorkingDirectory)/deploy/show-regional.json'
            overrideParameters: '-templateContainerUri $(templateContainerUri) -templateContainerSasToken $(templateContainerSasToken) -environmentName $(environmentName) -tenantId $(tenantId) -servicePrincipalObjectId $(servicePrincipalObjectId) -cosmosDbAccountName $(cosmosDbAccountName) -cosmosDbResourceGroup $(cosmosDbResourceGroup) -aadClientId $(aadClientId) -aadB2cIssuer $(aadB2cIssuer)'
            deploymentMode: 'Incremental'
        # Download the secres from Azure KeyVault
        - task: AzureKeyVault@1
          displayName: 'Download secrets from $(keyvaultName)'
          inputs:
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            KeyVaultName: '$(keyvaultName)'
        # Deploy the application to the Azure Function, and update appropriate
        # configuration values on the Azure Function.
        - task: AzureFunctionApp@1
          displayName: 'Deploy Code and App Configuration to $(functionAppName)'
          inputs:
            azureSubscription: 'Theatreers Dev AzureDevOps ServPrin'
            appType: 'functionApp'
            appName: '$(functionAppName)'
            package: '$(System.DefaultWorkingDirectory)/src/*.zip'
            appSettings: '-storageConnectionString $(storageConnectionString) -topicConnectionString $(Connection0) -cosmosConnectionString $(cosmosConnectionString)'
            deploymentMethod: 'auto'