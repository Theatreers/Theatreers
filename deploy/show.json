{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {            
        "cosmosDbAccountName": {
            "type": "string",
            "metadata": {
                "description": "Name of the CosmosDB account where the backend data is stored"
            }
        },
        "cosmosDbResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Resource group for the CosmosDB account, where the backend data is stored. If this is incorrect, deployment will fail as ARM cannot find the specific resource."
            }
        },          
        "environmentName": {
            "type": "string",
            "allowedValues": [
                "dev",
                "test",
                "qa",
                "prod"
            ],
            "defaultValue": "dev",
            "metadata": {
                "description": "Define which environment is being deployed, this will affect naming convention of all resources"
            }
        },            
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },     
        "serviceBusNamespaceResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Resource Group for the Service Bus Namespace, where the Service Bus topics will be housed."
            }
        },
        "servicePrincipalObjectId": {
            "type": "string",
            "metadata": {
                "description": "Object ID (not application ID) of the Azure DevOps service principal to be granted access to the KeyVault."
            }
        },        
        "tenantId": {
            "type": "string",
            "metadata": {
                "description": "GUID of the Azure AD Tenant associated with the Azure KeyVault"
            }
        },      
        "templateContainerUri": {
            "type": "string",
            "metadata": {
                "description": "URI of the Blob Storage Container containing the ARM Template building blocks"
            }
        },
        "templateContainerSasToken": {
            "type": "string",
            "metadata": {
                "description": "The SAS token of the container containing the ARM Template building blocks"
            }
        }
    },
    "variables": {
        "abbreviations": {
            "northeurope": "neu",
            "westeurope": "weu"
        },
        "appInsightsName": "[concat(variables('namePrefix'), 'ai')]",
        "keyvaultName": "[concat(variables('namePrefix'), 'kv')]",
        "namePrefix": "[concat(variables('organisationPrefix'),'-', variables('serviceName'), '-', variables('abbreviations')[parameters('location')], '-', parameters('environmentName'),'-')]",
        "namePrefixWithoutDashes": "[replace(variables('namePrefix'), '-', '')]",
        "organisationPrefix": "th",      
        "serviceBusNamespace": "[concat('theatreers-', parameters('environmentName'))]",
        "serviceBusTopics": [
            {
                "topicName": "newshow",
                "subscriptions": [
                    "aggregator",
                    "image",
                    "news"
                ]
            }
        ],
        "serviceName": "show",
        "sharedAccessPolicyName": "[concat(variables('serviceName'), 'service')]",
        "storageAccount": {
            "name": "[concat(variables('namePrefixWithoutDashes'), 'messages')]",
            "containers": [
                "showsimage",
                "showsnews"
            ]
        }
    },
    "resources": [
        {
            "apiVersion": "2017-05-10",
            "name": "functionDeployment",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "serviceBusTopicLoop",
                "appInsightsDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'function.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "namePrefix": {
                        "value": "[variables('namePrefix')]"
                    },
                    "namePrefixWithoutDashes": {
                        "value": "[variables('namePrefixWithoutDashes')]"
                    },
                    "appInsightsName": {
                        "value": "[variables('appInsightsName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an Azure Function (Function App, App Serivce Plan) and Storage Account, by using the Theatreers Azure Function Building Block."
        },
        {
            "apiVersion": "2017-05-10",
            "name": "appInsightsDeployment",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'applicationInsights.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appInsightsName": {
                        "value": "[variables('appInsightsName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an Azure Function (Function App, App Serivce Plan) and Storage Account, by using the Theatreers Azure Function Building Block."
        },       
        {
            "apiVersion": "2017-05-10",
            "name": "keyVaultDeployment",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'keyVault.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vaultName": {
                        "value": "[variables('keyvaultName')]"
                    },
                    "tenantId": {
                        "value": "[parameters('tenantId')]"
                    },
                    "objectId": {
                        "value": "[parameters('servicePrincipalObjectId')]"
                    }
                }
            },
            "comments": "Downstream template to deploy Azure KeyVault, associate it with a gievn tenant and assign a Service Principal Object with access to secrets. This uses the Theatreers Azure KeyVault Building Block."
        }, 
        {
            "apiVersion": "2018-02-14",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'Connection', copyIndex())]",
            "properties": {
                "value": "[replace(listkeys(resourceId(parameters('serviceBusNamespaceResourceGroup'), 'Microsoft.ServiceBus/namespaces/topics/authorizationRules', variables('serviceBusNamespace'), variables('serviceBusTopics')[copyIndex()].topicName, variables('sharedAccessPolicyName')), '2017-04-01').primaryConnectionString, concat('EntityPath=', variables('serviceBusTopics')[copyIndex()].topicName), '')]"
            },
            "dependsOn": [
                "topicAuthLoop"
            ],            
            "copy": {
                "name": "topicSecretLoop",
                "count": "[length(variables('serviceBusTopics'))]"
            },
            "comments": "Resource to deploy the Topic Connection String as a  KeyVault Secret. Pass in the resource group and service bus namespace name and appropriate topic, while also removing the EntityPath aspect from the connection string. This has to be removed, due to the Azure Function host not being able to handle it."
        },
        {
            "apiVersion": "2018-02-14",
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'cosmosConnectionString')]",
            "properties": {
                "value": "[concat('AccountEndpoint=https://', parameters('cosmosDbAccountName'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId(parameters('cosmosDbResourceGroup'), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), '2015-11-06').primaryMasterKey)]"
            },
            "dependsOn": [
                "keyVaultDeployment"
            ],
            "comments": "Resource to deploy the Azure CosmosDB Connection String as a  KeyVault Secret."
        },     
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('topicDeployment-', copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('serviceBusNamespaceResourceGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'servicebusTopic.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyvaultName": {
                        "value": "[variables('keyvaultName')]"
                    },
                    "serviceName": {
                        "value": "[variables('serviceName')]"
                    },
                    "environmentName": {
                        "value": "[parameters('environmentName')]"
                    },
                    "serviceBusTopicName": {
                        "value": "[variables('serviceBusTopics')[copyIndex()].topicName]"
                    },
                    "serviceBusSubscriptionNames": {
                        "value": "[variables('serviceBusTopics')[copyIndex()].subscriptions]"
                    }
                }
            },
            "copy": {
                "name": "serviceBusTopicLoop",
                "count": "[length(variables('serviceBusTopics'))]"
            },            
            "comments": "Downstream template to deploy Service Bus Topic onto a pre-existing service bus namespace. This uses the Theatreers Service Bus Topic Building Block."
        }, 
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('authorizationRule-', copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('serviceBusNamespaceResourceGroup')]",
            "dependsOn": [
                "serviceBusTopicLoop"
            ],     
            "copy": {
                "name": "topicAuthLoop",
                "count": "[length(variables('serviceBusTopics'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'servicebusAuthorization.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "authorizationRuleName": {
                        "value": "[concat(variables('serviceBusNamespace'), '/', variables('serviceBusTopics')[copyIndex()].topicName, '/', variables('sharedAccessPolicyName'))]"
                    }
                }
            },
            "comments": "Downstream template to deploy a Shared Access Policy at the scope of a Service Bus Topic. This uses the Theatreers Service Bus Authorization Building Block."
        },              
        {
            "apiVersion": "2017-05-10",
            "name": "messagesStoreDeployment",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVaultDeployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'messagesStore.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "accountName": {
                        "value": "[variables('storageAccount').name]"
                    },
                    "keyvaultName": {
                        "value": "[variables('keyvaultName')]"
                    }
                }
            },
            "comments": "Downstream template to deploy an Azure Storage account to be used as a temporary message store (holds transient data related to the microservice). This uses the Theatreers Azure Storage Account Building Block."
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('storageAccountContainerDeployment-', copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'messagesStoreDeployment')]"
            ],
            "copy": {
                "name": "storageAccountContainerLoop",
                "count": "[length(variables('storageAccount').containers)]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateContainerUri'), 'storageAccountContainer.json', parameters('templateContainerSasToken'))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "accountName": {
                        "value": "[variables('storageAccount').name]"
                    },
                    "containerName": {
                        "value": "[variables('storageAccount').containers[copyIndex()]]"
                    }
                }
            },
            "comments": "Downstream template to deploy a container to a given Azure Storage Account (that has already been deployed in this template). This uses the Theatreers Azure Storage Account Container Building Block."
        }
    ],
    "outputs": {}
}